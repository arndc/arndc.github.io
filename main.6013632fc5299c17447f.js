!function(e){var t={};function a(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,i){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(a.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(i,n,function(t){return e[t]}.bind(null,n));return i},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t);a(1),a(2);console.log("Welcome on my site!"),particlesJS.load("particles-js","particles.json")},function(e,t){var a=function(e,t){var a=document.querySelector("#"+e+" > .particles-js-canvas-el");this.pJS={canvas:{el:a,w:a.offsetWidth,h:a.offsetHeight},particles:{number:{value:400,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle",stroke:{width:0,color:"#ff0000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100}},opacity:{value:1,random:!1,anim:{enable:!1,speed:2,opacity_min:0,sync:!1}},size:{value:20,random:!1,anim:{enable:!1,speed:20,size_min:0,sync:!1}},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:2,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"grab"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}},mouse:{}},retina_detect:!1,fn:{interact:{},modes:{},vendors:{}},tmp:{}};var r=this.pJS;t&&Object.deepExtend(r,t),r.tmp.obj={size_value:r.particles.size.value,size_anim_speed:r.particles.size.anim.speed,move_speed:r.particles.move.speed,line_linked_distance:r.particles.line_linked.distance,line_linked_width:r.particles.line_linked.width,mode_grab_distance:r.interactivity.modes.grab.distance,mode_bubble_distance:r.interactivity.modes.bubble.distance,mode_bubble_size:r.interactivity.modes.bubble.size,mode_repulse_distance:r.interactivity.modes.repulse.distance},r.fn.retinaInit=function(){r.retina_detect&&window.devicePixelRatio>1?(r.canvas.pxratio=window.devicePixelRatio,r.tmp.retina=!0):(r.canvas.pxratio=1,r.tmp.retina=!1),r.canvas.w=r.canvas.el.offsetWidth*r.canvas.pxratio,r.canvas.h=r.canvas.el.offsetHeight*r.canvas.pxratio,r.particles.size.value=r.tmp.obj.size_value*r.canvas.pxratio,r.particles.size.anim.speed=r.tmp.obj.size_anim_speed*r.canvas.pxratio,r.particles.move.speed=r.tmp.obj.move_speed*r.canvas.pxratio,r.particles.line_linked.distance=r.tmp.obj.line_linked_distance*r.canvas.pxratio,r.interactivity.modes.grab.distance=r.tmp.obj.mode_grab_distance*r.canvas.pxratio,r.interactivity.modes.bubble.distance=r.tmp.obj.mode_bubble_distance*r.canvas.pxratio,r.particles.line_linked.width=r.tmp.obj.line_linked_width*r.canvas.pxratio,r.interactivity.modes.bubble.size=r.tmp.obj.mode_bubble_size*r.canvas.pxratio,r.interactivity.modes.repulse.distance=r.tmp.obj.mode_repulse_distance*r.canvas.pxratio},r.fn.canvasInit=function(){r.canvas.ctx=r.canvas.el.getContext("2d")},r.fn.canvasSize=function(){r.canvas.el.width=r.canvas.w,r.canvas.el.height=r.canvas.h,r&&r.interactivity.events.resize&&window.addEventListener("resize",(function(){r.canvas.w=r.canvas.el.offsetWidth,r.canvas.h=r.canvas.el.offsetHeight,r.tmp.retina&&(r.canvas.w*=r.canvas.pxratio,r.canvas.h*=r.canvas.pxratio),r.canvas.el.width=r.canvas.w,r.canvas.el.height=r.canvas.h,r.particles.move.enable||(r.fn.particlesEmpty(),r.fn.particlesCreate(),r.fn.particlesDraw(),r.fn.vendors.densityAutoParticles()),r.fn.vendors.densityAutoParticles()}))},r.fn.canvasPaint=function(){r.canvas.ctx.fillRect(0,0,r.canvas.w,r.canvas.h)},r.fn.canvasClear=function(){r.canvas.ctx.clearRect(0,0,r.canvas.w,r.canvas.h)},r.fn.particle=function(e,t,a){if(this.radius=(r.particles.size.random?Math.random():1)*r.particles.size.value,r.particles.size.anim.enable&&(this.size_status=!1,this.vs=r.particles.size.anim.speed/100,r.particles.size.anim.sync||(this.vs=this.vs*Math.random())),this.x=a?a.x:Math.random()*r.canvas.w,this.y=a?a.y:Math.random()*r.canvas.h,this.x>r.canvas.w-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>r.canvas.h-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),r.particles.move.bounce&&r.fn.vendors.checkOverlap(this,a),this.color={},"object"==typeof e.value)if(e.value instanceof Array){var n=e.value[Math.floor(Math.random()*r.particles.color.value.length)];this.color.rgb=i(n)}else null!=e.value.r&&null!=e.value.g&&null!=e.value.b&&(this.color.rgb={r:e.value.r,g:e.value.g,b:e.value.b}),null!=e.value.h&&null!=e.value.s&&null!=e.value.l&&(this.color.hsl={h:e.value.h,s:e.value.s,l:e.value.l});else"random"==e.value?this.color.rgb={r:Math.floor(256*Math.random())+0,g:Math.floor(256*Math.random())+0,b:Math.floor(256*Math.random())+0}:"string"==typeof e.value&&(this.color=e,this.color.rgb=i(this.color.value));this.opacity=(r.particles.opacity.random?Math.random():1)*r.particles.opacity.value,r.particles.opacity.anim.enable&&(this.opacity_status=!1,this.vo=r.particles.opacity.anim.speed/100,r.particles.opacity.anim.sync||(this.vo=this.vo*Math.random()));var s={};switch(r.particles.move.direction){case"top":s={x:0,y:-1};break;case"top-right":s={x:.5,y:-.5};break;case"right":s={x:1,y:-0};break;case"bottom-right":s={x:.5,y:.5};break;case"bottom":s={x:0,y:1};break;case"bottom-left":s={x:-.5,y:1};break;case"left":s={x:-1,y:0};break;case"top-left":s={x:-.5,y:-.5};break;default:s={x:0,y:0}}r.particles.move.straight?(this.vx=s.x,this.vy=s.y,r.particles.move.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=s.x+Math.random()-.5,this.vy=s.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy;var c=r.particles.shape.type;if("object"==typeof c){if(c instanceof Array){var o=c[Math.floor(Math.random()*c.length)];this.shape=o}}else this.shape=c;if("image"==this.shape){var l=r.particles.shape;this.img={src:l.image.src,ratio:l.image.width/l.image.height},this.img.ratio||(this.img.ratio=1),"svg"==r.tmp.img_type&&null!=r.tmp.source_svg&&(r.fn.vendors.createSvgImg(this),r.tmp.pushing&&(this.img.loaded=!1))}},r.fn.particle.prototype.draw=function(){var e=this;if(null!=e.radius_bubble)var t=e.radius_bubble;else t=e.radius;if(null!=e.opacity_bubble)var a=e.opacity_bubble;else a=e.opacity;if(e.color.rgb)var i="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+a+")";else i="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+a+")";switch(r.canvas.ctx.fillStyle=i,r.canvas.ctx.beginPath(),e.shape){case"circle":r.canvas.ctx.arc(e.x,e.y,t,0,2*Math.PI,!1);break;case"edge":r.canvas.ctx.rect(e.x-t,e.y-t,2*t,2*t);break;case"triangle":r.fn.vendors.drawShape(r.canvas.ctx,e.x-t,e.y+t/1.66,2*t,3,2);break;case"polygon":r.fn.vendors.drawShape(r.canvas.ctx,e.x-t/(r.particles.shape.polygon.nb_sides/3.5),e.y-t/.76,2.66*t/(r.particles.shape.polygon.nb_sides/3),r.particles.shape.polygon.nb_sides,1);break;case"star":r.fn.vendors.drawShape(r.canvas.ctx,e.x-2*t/(r.particles.shape.polygon.nb_sides/4),e.y-t/1.52,2*t*2.66/(r.particles.shape.polygon.nb_sides/3),r.particles.shape.polygon.nb_sides,2);break;case"image":if("svg"==r.tmp.img_type)var n=e.img.obj;else n=r.tmp.img_obj;n&&r.canvas.ctx.drawImage(n,e.x-t,e.y-t,2*t,2*t/e.img.ratio)}r.canvas.ctx.closePath(),r.particles.shape.stroke.width>0&&(r.canvas.ctx.strokeStyle=r.particles.shape.stroke.color,r.canvas.ctx.lineWidth=r.particles.shape.stroke.width,r.canvas.ctx.stroke()),r.canvas.ctx.fill()},r.fn.particlesCreate=function(){for(var e=0;e<r.particles.number.value;e++)r.particles.array.push(new r.fn.particle(r.particles.color,r.particles.opacity.value))},r.fn.particlesUpdate=function(){for(var e=0;e<r.particles.array.length;e++){var t=r.particles.array[e];if(r.particles.move.enable){var a=r.particles.move.speed/2;t.x+=t.vx*a,t.y+=t.vy*a}if(r.particles.opacity.anim.enable&&(1==t.opacity_status?(t.opacity>=r.particles.opacity.value&&(t.opacity_status=!1),t.opacity+=t.vo):(t.opacity<=r.particles.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacity-=t.vo),t.opacity<0&&(t.opacity=0)),r.particles.size.anim.enable&&(1==t.size_status?(t.radius>=r.particles.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=r.particles.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),"bounce"==r.particles.move.out_mode)var i={x_left:t.radius,x_right:r.canvas.w,y_top:t.radius,y_bottom:r.canvas.h};else i={x_left:-t.radius,x_right:r.canvas.w+t.radius,y_top:-t.radius,y_bottom:r.canvas.h+t.radius};switch(t.x-t.radius>r.canvas.w?(t.x=i.x_left,t.y=Math.random()*r.canvas.h):t.x+t.radius<0&&(t.x=i.x_right,t.y=Math.random()*r.canvas.h),t.y-t.radius>r.canvas.h?(t.y=i.y_top,t.x=Math.random()*r.canvas.w):t.y+t.radius<0&&(t.y=i.y_bottom,t.x=Math.random()*r.canvas.w),r.particles.move.out_mode){case"bounce":t.x+t.radius>r.canvas.w?t.vx=-t.vx:t.x-t.radius<0&&(t.vx=-t.vx),t.y+t.radius>r.canvas.h?t.vy=-t.vy:t.y-t.radius<0&&(t.vy=-t.vy)}if(n("grab",r.interactivity.events.onhover.mode)&&r.fn.modes.grabParticle(t),(n("bubble",r.interactivity.events.onhover.mode)||n("bubble",r.interactivity.events.onclick.mode))&&r.fn.modes.bubbleParticle(t),(n("repulse",r.interactivity.events.onhover.mode)||n("repulse",r.interactivity.events.onclick.mode))&&r.fn.modes.repulseParticle(t),r.particles.line_linked.enable||r.particles.move.attract.enable)for(var s=e+1;s<r.particles.array.length;s++){var c=r.particles.array[s];r.particles.line_linked.enable&&r.fn.interact.linkParticles(t,c),r.particles.move.attract.enable&&r.fn.interact.attractParticles(t,c),r.particles.move.bounce&&r.fn.interact.bounceParticles(t,c)}}},r.fn.particlesDraw=function(){r.canvas.ctx.clearRect(0,0,r.canvas.w,r.canvas.h),r.fn.particlesUpdate();for(var e=0;e<r.particles.array.length;e++){r.particles.array[e].draw()}},r.fn.particlesEmpty=function(){r.particles.array=[]},r.fn.particlesRefresh=function(){cancelRequestAnimFrame(r.fn.checkAnimFrame),cancelRequestAnimFrame(r.fn.drawAnimFrame),r.tmp.source_svg=void 0,r.tmp.img_obj=void 0,r.tmp.count_svg=0,r.fn.particlesEmpty(),r.fn.canvasClear(),r.fn.vendors.start()},r.fn.interact.linkParticles=function(e,t){var a=e.x-t.x,i=e.y-t.y,n=Math.sqrt(a*a+i*i);if(n<=r.particles.line_linked.distance){var s=r.particles.line_linked.opacity-n/(1/r.particles.line_linked.opacity)/r.particles.line_linked.distance;if(s>0){var c=r.particles.line_linked.color_rgb_line;r.canvas.ctx.strokeStyle="rgba("+c.r+","+c.g+","+c.b+","+s+")",r.canvas.ctx.lineWidth=r.particles.line_linked.width,r.canvas.ctx.beginPath(),r.canvas.ctx.moveTo(e.x,e.y),r.canvas.ctx.lineTo(t.x,t.y),r.canvas.ctx.stroke(),r.canvas.ctx.closePath()}}},r.fn.interact.attractParticles=function(e,t){var a=e.x-t.x,i=e.y-t.y;if(Math.sqrt(a*a+i*i)<=r.particles.line_linked.distance){var n=a/(1e3*r.particles.move.attract.rotateX),s=i/(1e3*r.particles.move.attract.rotateY);e.vx-=n,e.vy-=s,t.vx+=n,t.vy+=s}},r.fn.interact.bounceParticles=function(e,t){var a=e.x-t.x,i=e.y-t.y;Math.sqrt(a*a+i*i)<=e.radius+t.radius&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)},r.fn.modes.pushParticles=function(e,t){r.tmp.pushing=!0;for(var a=0;a<e;a++)r.particles.array.push(new r.fn.particle(r.particles.color,r.particles.opacity.value,{x:t?t.pos_x:Math.random()*r.canvas.w,y:t?t.pos_y:Math.random()*r.canvas.h})),a==e-1&&(r.particles.move.enable||r.fn.particlesDraw(),r.tmp.pushing=!1)},r.fn.modes.removeParticles=function(e){r.particles.array.splice(0,e),r.particles.move.enable||r.fn.particlesDraw()},r.fn.modes.bubbleParticle=function(e){if(r.interactivity.events.onhover.enable&&n("bubble",r.interactivity.events.onhover.mode)){var t=e.x-r.interactivity.mouse.pos_x,a=e.y-r.interactivity.mouse.pos_y,i=1-(v=Math.sqrt(t*t+a*a))/r.interactivity.modes.bubble.distance;function s(){e.opacity_bubble=e.opacity,e.radius_bubble=e.radius}if(v<=r.interactivity.modes.bubble.distance){if(i>=0&&"mousemove"==r.interactivity.status){if(r.interactivity.modes.bubble.size!=r.particles.size.value)if(r.interactivity.modes.bubble.size>r.particles.size.value){(o=e.radius+r.interactivity.modes.bubble.size*i)>=0&&(e.radius_bubble=o)}else{var c=e.radius-r.interactivity.modes.bubble.size,o=e.radius-c*i;e.radius_bubble=o>0?o:0}var l;if(r.interactivity.modes.bubble.opacity!=r.particles.opacity.value)if(r.interactivity.modes.bubble.opacity>r.particles.opacity.value)(l=r.interactivity.modes.bubble.opacity*i)>e.opacity&&l<=r.interactivity.modes.bubble.opacity&&(e.opacity_bubble=l);else(l=e.opacity-(r.particles.opacity.value-r.interactivity.modes.bubble.opacity)*i)<e.opacity&&l>=r.interactivity.modes.bubble.opacity&&(e.opacity_bubble=l)}}else s();"mouseleave"==r.interactivity.status&&s()}else if(r.interactivity.events.onclick.enable&&n("bubble",r.interactivity.events.onclick.mode)){if(r.tmp.bubble_clicking){t=e.x-r.interactivity.mouse.click_pos_x,a=e.y-r.interactivity.mouse.click_pos_y;var v=Math.sqrt(t*t+a*a),p=((new Date).getTime()-r.interactivity.mouse.click_time)/1e3;p>r.interactivity.modes.bubble.duration&&(r.tmp.bubble_duration_end=!0),p>2*r.interactivity.modes.bubble.duration&&(r.tmp.bubble_clicking=!1,r.tmp.bubble_duration_end=!1)}function u(t,a,i,n,s){if(t!=a)if(r.tmp.bubble_duration_end)null!=i&&(o=t+(t-(n-p*(n-t)/r.interactivity.modes.bubble.duration)),"size"==s&&(e.radius_bubble=o),"opacity"==s&&(e.opacity_bubble=o));else if(v<=r.interactivity.modes.bubble.distance){if(null!=i)var c=i;else c=n;if(c!=t){var o=n-p*(n-t)/r.interactivity.modes.bubble.duration;"size"==s&&(e.radius_bubble=o),"opacity"==s&&(e.opacity_bubble=o)}}else"size"==s&&(e.radius_bubble=void 0),"opacity"==s&&(e.opacity_bubble=void 0)}r.tmp.bubble_clicking&&(u(r.interactivity.modes.bubble.size,r.particles.size.value,e.radius_bubble,e.radius,"size"),u(r.interactivity.modes.bubble.opacity,r.particles.opacity.value,e.opacity_bubble,e.opacity,"opacity"))}},r.fn.modes.repulseParticle=function(e){if(r.interactivity.events.onhover.enable&&n("repulse",r.interactivity.events.onhover.mode)&&"mousemove"==r.interactivity.status){var t=e.x-r.interactivity.mouse.pos_x,a=e.y-r.interactivity.mouse.pos_y,i=Math.sqrt(t*t+a*a),s={x:t/i,y:a/i},c=r.interactivity.modes.repulse.distance,o=(m=1/c*(-1*Math.pow(i/c,2)+1)*c*100,b=0,f=50,Math.min(Math.max(m,b),f)),l={x:e.x+s.x*o,y:e.y+s.y*o};"bounce"==r.particles.move.out_mode?(l.x-e.radius>0&&l.x+e.radius<r.canvas.w&&(e.x=l.x),l.y-e.radius>0&&l.y+e.radius<r.canvas.h&&(e.y=l.y)):(e.x=l.x,e.y=l.y)}else if(r.interactivity.events.onclick.enable&&n("repulse",r.interactivity.events.onclick.mode))if(r.tmp.repulse_finish||(r.tmp.repulse_count++,r.tmp.repulse_count==r.particles.array.length&&(r.tmp.repulse_finish=!0)),r.tmp.repulse_clicking){c=Math.pow(r.interactivity.modes.repulse.distance/6,3);var v=r.interactivity.mouse.click_pos_x-e.x,p=r.interactivity.mouse.click_pos_y-e.y,u=v*v+p*p,d=-c/u*1;u<=c&&function(){var t=Math.atan2(p,v);if(e.vx=d*Math.cos(t),e.vy=d*Math.sin(t),"bounce"==r.particles.move.out_mode){var a={x:e.x+e.vx,y:e.y+e.vy};a.x+e.radius>r.canvas.w?e.vx=-e.vx:a.x-e.radius<0&&(e.vx=-e.vx),a.y+e.radius>r.canvas.h?e.vy=-e.vy:a.y-e.radius<0&&(e.vy=-e.vy)}}()}else 0==r.tmp.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i);var m,b,f},r.fn.modes.grabParticle=function(e){if(r.interactivity.events.onhover.enable&&"mousemove"==r.interactivity.status){var t=e.x-r.interactivity.mouse.pos_x,a=e.y-r.interactivity.mouse.pos_y,i=Math.sqrt(t*t+a*a);if(i<=r.interactivity.modes.grab.distance){var n=r.interactivity.modes.grab.line_linked.opacity-i/(1/r.interactivity.modes.grab.line_linked.opacity)/r.interactivity.modes.grab.distance;if(n>0){var s=r.particles.line_linked.color_rgb_line;r.canvas.ctx.strokeStyle="rgba("+s.r+","+s.g+","+s.b+","+n+")",r.canvas.ctx.lineWidth=r.particles.line_linked.width,r.canvas.ctx.beginPath(),r.canvas.ctx.moveTo(e.x,e.y),r.canvas.ctx.lineTo(r.interactivity.mouse.pos_x,r.interactivity.mouse.pos_y),r.canvas.ctx.stroke(),r.canvas.ctx.closePath()}}}},r.fn.vendors.eventsListeners=function(){"window"==r.interactivity.detect_on?r.interactivity.el=window:r.interactivity.el=r.canvas.el,(r.interactivity.events.onhover.enable||r.interactivity.events.onclick.enable)&&(r.interactivity.el.addEventListener("mousemove",(function(e){if(r.interactivity.el==window)var t=e.clientX,a=e.clientY;else t=e.offsetX||e.clientX,a=e.offsetY||e.clientY;r.interactivity.mouse.pos_x=t,r.interactivity.mouse.pos_y=a,r.tmp.retina&&(r.interactivity.mouse.pos_x*=r.canvas.pxratio,r.interactivity.mouse.pos_y*=r.canvas.pxratio),r.interactivity.status="mousemove"})),r.interactivity.el.addEventListener("mouseleave",(function(e){r.interactivity.mouse.pos_x=null,r.interactivity.mouse.pos_y=null,r.interactivity.status="mouseleave"}))),r.interactivity.events.onclick.enable&&r.interactivity.el.addEventListener("click",(function(){if(r.interactivity.mouse.click_pos_x=r.interactivity.mouse.pos_x,r.interactivity.mouse.click_pos_y=r.interactivity.mouse.pos_y,r.interactivity.mouse.click_time=(new Date).getTime(),r.interactivity.events.onclick.enable)switch(r.interactivity.events.onclick.mode){case"push":r.particles.move.enable?r.fn.modes.pushParticles(r.interactivity.modes.push.particles_nb,r.interactivity.mouse):1==r.interactivity.modes.push.particles_nb?r.fn.modes.pushParticles(r.interactivity.modes.push.particles_nb,r.interactivity.mouse):r.interactivity.modes.push.particles_nb>1&&r.fn.modes.pushParticles(r.interactivity.modes.push.particles_nb);break;case"remove":r.fn.modes.removeParticles(r.interactivity.modes.remove.particles_nb);break;case"bubble":r.tmp.bubble_clicking=!0;break;case"repulse":r.tmp.repulse_clicking=!0,r.tmp.repulse_count=0,r.tmp.repulse_finish=!1,setTimeout((function(){r.tmp.repulse_clicking=!1}),1e3*r.interactivity.modes.repulse.duration)}}))},r.fn.vendors.densityAutoParticles=function(){if(r.particles.number.density.enable){var e=r.canvas.el.width*r.canvas.el.height/1e3;r.tmp.retina&&(e/=2*r.canvas.pxratio);var t=e*r.particles.number.value/r.particles.number.density.value_area,a=r.particles.array.length-t;a<0?r.fn.modes.pushParticles(Math.abs(a)):r.fn.modes.removeParticles(a)}},r.fn.vendors.checkOverlap=function(e,t){for(var a=0;a<r.particles.array.length;a++){var i=r.particles.array[a],n=e.x-i.x,s=e.y-i.y;Math.sqrt(n*n+s*s)<=e.radius+i.radius&&(e.x=t?t.x:Math.random()*r.canvas.w,e.y=t?t.y:Math.random()*r.canvas.h,r.fn.vendors.checkOverlap(e))}},r.fn.vendors.createSvgImg=function(e){var t=r.tmp.source_svg.replace(/#([0-9A-F]{3,6})/gi,(function(t,a,i,n){if(e.color.rgb)var r="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+e.opacity+")";else r="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+e.opacity+")";return r})),a=new Blob([t],{type:"image/svg+xml;charset=utf-8"}),i=window.URL||window.webkitURL||window,n=i.createObjectURL(a),s=new Image;s.addEventListener("load",(function(){e.img.obj=s,e.img.loaded=!0,i.revokeObjectURL(n),r.tmp.count_svg++})),s.src=n},r.fn.vendors.destroypJS=function(){cancelAnimationFrame(r.fn.drawAnimFrame),a.remove(),pJSDom=null},r.fn.vendors.drawShape=function(e,t,a,i,n,r){var s=n*r,c=n/r,o=180*(c-2)/c,l=Math.PI-Math.PI*o/180;e.save(),e.beginPath(),e.translate(t,a),e.moveTo(0,0);for(var v=0;v<s;v++)e.lineTo(i,0),e.translate(i,0),e.rotate(l);e.fill(),e.restore()},r.fn.vendors.exportImg=function(){window.open(r.canvas.el.toDataURL("image/png"),"_blank")},r.fn.vendors.loadImg=function(e){if(r.tmp.img_error=void 0,""!=r.particles.shape.image.src)if("svg"==e){var t=new XMLHttpRequest;t.open("GET",r.particles.shape.image.src),t.onreadystatechange=function(e){4==t.readyState&&(200==t.status?(r.tmp.source_svg=e.currentTarget.response,r.fn.vendors.checkBeforeDraw()):(console.log("Error pJS - Image not found"),r.tmp.img_error=!0))},t.send()}else{var a=new Image;a.addEventListener("load",(function(){r.tmp.img_obj=a,r.fn.vendors.checkBeforeDraw()})),a.src=r.particles.shape.image.src}else console.log("Error pJS - No image.src"),r.tmp.img_error=!0},r.fn.vendors.draw=function(){"image"==r.particles.shape.type?"svg"==r.tmp.img_type?r.tmp.count_svg>=r.particles.number.value?(r.fn.particlesDraw(),r.particles.move.enable?r.fn.drawAnimFrame=requestAnimFrame(r.fn.vendors.draw):cancelRequestAnimFrame(r.fn.drawAnimFrame)):r.tmp.img_error||(r.fn.drawAnimFrame=requestAnimFrame(r.fn.vendors.draw)):null!=r.tmp.img_obj?(r.fn.particlesDraw(),r.particles.move.enable?r.fn.drawAnimFrame=requestAnimFrame(r.fn.vendors.draw):cancelRequestAnimFrame(r.fn.drawAnimFrame)):r.tmp.img_error||(r.fn.drawAnimFrame=requestAnimFrame(r.fn.vendors.draw)):(r.fn.particlesDraw(),r.particles.move.enable?r.fn.drawAnimFrame=requestAnimFrame(r.fn.vendors.draw):cancelRequestAnimFrame(r.fn.drawAnimFrame))},r.fn.vendors.checkBeforeDraw=function(){"image"==r.particles.shape.type?"svg"==r.tmp.img_type&&null==r.tmp.source_svg?r.tmp.checkAnimFrame=requestAnimFrame(check):(cancelRequestAnimFrame(r.tmp.checkAnimFrame),r.tmp.img_error||(r.fn.vendors.init(),r.fn.vendors.draw())):(r.fn.vendors.init(),r.fn.vendors.draw())},r.fn.vendors.init=function(){r.fn.retinaInit(),r.fn.canvasInit(),r.fn.canvasSize(),r.fn.canvasPaint(),r.fn.particlesCreate(),r.fn.vendors.densityAutoParticles(),r.particles.line_linked.color_rgb_line=i(r.particles.line_linked.color)},r.fn.vendors.start=function(){n("image",r.particles.shape.type)?(r.tmp.img_type=r.particles.shape.image.src.substr(r.particles.shape.image.src.length-3),r.fn.vendors.loadImg(r.tmp.img_type)):r.fn.vendors.checkBeforeDraw()},r.fn.vendors.eventsListeners(),r.fn.vendors.start()};function i(e){e=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,t,a,i){return t+t+a+a+i+i}));var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null}function n(e,t){return t.indexOf(e)>-1}Object.deepExtend=function(e,t){for(var a in t)t[a]&&t[a].constructor&&t[a].constructor===Object?(e[a]=e[a]||{},arguments.callee(e[a],t[a])):e[a]=t[a];return e},window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},window.cancelRequestAnimFrame=window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout,window.pJSDom=[],window.particlesJS=function(e,t){"string"!=typeof e&&(t=e,e="particles-js"),e||(e="particles-js");var i=document.getElementById(e),n=i.getElementsByClassName("particles-js-canvas-el");if(n.length)for(;n.length>0;)i.removeChild(n[0]);var r=document.createElement("canvas");r.className="particles-js-canvas-el",r.style.width="100%",r.style.height="100%",null!=document.getElementById(e).appendChild(r)&&pJSDom.push(new a(e,t))},window.particlesJS.load=function(e,t,a){var i=new XMLHttpRequest;i.open("GET",t),i.onreadystatechange=function(t){if(4==i.readyState)if(200==i.status){var n=JSON.parse(t.currentTarget.response);window.particlesJS(e,n),a&&a()}else console.log("Error pJS - XMLHttpRequest status: "+i.status),console.log("Error pJS - File config not found")},i.send()}},function(e,t,a){var i=a(3);"string"==typeof i&&(i=[[e.i,i,""]]);var n={insert:"head",singleton:!1};a(5)(i,n);i.locals&&(e.exports=i.locals)},function(e,t,a){var i=a(4);(e.exports=i(!1)).push([e.i,'html, body {\n    margin: 0;\n    height: 100%;\n    display: block;\n    font-family: "Source Sans Pro", Helvetica, sans-serif;\n    background: #233146;\n    color: #f5f5f5;\n}\n\nmain {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n}\n\nh1 {\n    font-size: 5rem;\n}\n\n.colorAccent {\n    color: rgb(75, 249, 118);\n}\n\n.code {\n  font-family: Consolas, "Source Sans Pro", Helvetica, sans-serif;\n}\n\n.blink {\n    animation: blink 1s step-start 0s infinite;\n    -webkit-animation: blink 1s step-start 0s infinite;\n}\n\n@keyframes blink {\n    50% {\n        opacity: 0.0;\n    }\n}\n\n@-webkit-keyframes blink {\n    50% {\n        opacity: 0.0;\n    }\n}\n\n#particles-js {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n}\n',""])},function(e,t,a){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var a=function(e,t){var a=e[1]||"",i=e[3];if(!i)return a;if(t&&"function"==typeof btoa){var n=(s=i,c=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(o," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[a].concat(r).concat([n]).join("\n")}var s,c,o;return[a].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(a,"}"):a})).join("")},t.i=function(e,a){"string"==typeof e&&(e=[[null,e,""]]);for(var i=0;i<e.length;i++){var n=[].concat(e[i]);a&&(n[2]?n[2]="".concat(a," and ").concat(n[2]):n[2]=a),t.push(n)}},t}},function(e,t,a){"use strict";var i,n={},r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},s=function(){var e={};return function(t){if(void 0===e[t]){var a=document.querySelector(t);if(window.HTMLIFrameElement&&a instanceof window.HTMLIFrameElement)try{a=a.contentDocument.head}catch(e){a=null}e[t]=a}return e[t]}}();function c(e,t){for(var a=[],i={},n=0;n<e.length;n++){var r=e[n],s=t.base?r[0]+t.base:r[0],c={css:r[1],media:r[2],sourceMap:r[3]};i[s]?i[s].parts.push(c):a.push(i[s]={id:s,parts:[c]})}return a}function o(e,t){for(var a=0;a<e.length;a++){var i=e[a],r=n[i.id],s=0;if(r){for(r.refs++;s<r.parts.length;s++)r.parts[s](i.parts[s]);for(;s<i.parts.length;s++)r.parts.push(f(i.parts[s],t))}else{for(var c=[];s<i.parts.length;s++)c.push(f(i.parts[s],t));n[i.id]={id:i.id,refs:1,parts:c}}}}function l(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var i=a.nc;i&&(e.attributes.nonce=i)}if(Object.keys(e.attributes).forEach((function(a){t.setAttribute(a,e.attributes[a])})),"function"==typeof e.insert)e.insert(t);else{var n=s(e.insert||"head");if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(t)}return t}var v,p=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function u(e,t,a,i){var n=a?"":i.css;if(e.styleSheet)e.styleSheet.cssText=p(t,n);else{var r=document.createTextNode(n),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function d(e,t,a){var i=a.css,n=a.media,r=a.sourceMap;if(n&&e.setAttribute("media",n),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var m=null,b=0;function f(e,t){var a,i,n;if(t.singleton){var r=b++;a=m||(m=l(t)),i=u.bind(null,a,r,!1),n=u.bind(null,a,r,!0)}else a=l(t),i=d.bind(null,a,t),n=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(a)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else n()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r());var a=c(e,t);return o(a,t),function(e){for(var i=[],r=0;r<a.length;r++){var s=a[r],l=n[s.id];l&&(l.refs--,i.push(l))}e&&o(c(e,t),t);for(var v=0;v<i.length;v++){var p=i[v];if(0===p.refs){for(var u=0;u<p.parts.length;u++)p.parts[u]();delete n[p.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,